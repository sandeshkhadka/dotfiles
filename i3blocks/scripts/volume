#!/usr/bin/env python3
import os
import subprocess
import re

# Handle button clicks
block_button = os.getenv("BLOCK_BUTTON")
if block_button == "1":  # Left-click: Open PulseAudio control
    subprocess.run(["pavucontrol"])
elif block_button == "3":  # Right-click: Toggle mute
    subprocess.run([os.path.expanduser("~/bin/audio-ctl"), "mute"])
elif block_button == "4":  # Scroll up: Increase volume
    subprocess.run([os.path.expanduser("~/bin/audio-ctl"), "up"])
elif block_button == "5":  # Scroll down: Decrease volume
    subprocess.run([os.path.expanduser("~/bin/audio-ctl"), "down"])

# Get output (speaker/headphones) volume and mute status
def get_output_status():
    try:
        output = subprocess.check_output(["amixer", "get", "Master"], text=True)
        match = re.search(r"(\d+)%", output)
        muted = "off" in output  # Check if muted
        return ("Muted" if muted else match.group(1) + "%") if match else "N/A"
    except Exception:
        return "N/A"

# Get output source name (shortened to 6 chars)
def get_output_source():
    try:
        output = subprocess.check_output(["pactl", "get-default-sink"], text=True).strip()
        # Map known names to shorter versions
        name_mappings = {
            "alsa_output.pci": "BuiltIn",
            "alsa_output.usb": "USBSpk",
            "bluez_sink": "BTSpk",
            "analog-stereo": "Analog",
            "usb": "USB",
            "headset": "Headset",
            "default": "Default",
        }
        for key, short_name in name_mappings.items():
            if key in output:
                return short_name[:7]  # Max 6 chars

        return output[:6]  # Fallback: Use first 6 chars
    except Exception:
        return "Output"

# Print the result (Output Source Name: Volume or Muted)
print(f"{get_output_status()}[{get_output_source()}]")

